// APPROACH 1
class Solution
{
public:
    vector<vector<int>> transpose(vector<vector<int>> &matrix)
    {
        vector<vector<int>> ans;
        int rows = matrix.size();
        int cols = matrix[0].size();

        for (int j = 0; j < cols; j++)
        {
            vector<int> temp;
            for (int i = 0; i < rows; i++)
            {
                temp.push_back(matrix[i][j]);
            }
            ans.push_back(temp);
        }

        return ans;
    }
};

// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************

// APPROACH 2 - Better time and space complexity

class Solution
{
public:
    vector<vector<int>> transpose(vector<vector<int>> &matrix)
    {
        int rows = matrix.size();
        int cols = matrix[0].size();
        vector<vector<int>> ans(cols, vector<int>(rows, 0));

        for (int j = 0; j < cols; j++)
        {
            for (int i = 0; i < rows; i++)
            {
                ans[j][i] = matrix[i][j];
            }
        }

        return ans;
    }
};

// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************
// *********************************************************************************

// APPROACH 3 - For square matrices, the following approach can be used as well

class Solution
{
public:
    vector<vector<int>> transpose(vector<vector<int>> &matrix)
    {
        int rows = matrix.size();
        int cols = matrix[0].size();

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j <= i; j++)
            {
                swap(matrix[i][j], matrix[j][i]);
            }
        }

        return matrix;
    }
};